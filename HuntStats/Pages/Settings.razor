@page "/settings"
@using MediatR
@using HuntStats.Features
@using HuntStats.Models
@inject IMediator _mediator
@inject IFolderPicker _folderPicker

<div class="card-container" style="max-width: 1280px;margin:  auto;">
    <h3>Settings</h3>
    <div class="card">
        <div class="card-body">
            
            <form>
                <div class="form-group row">
                    <label for="staticEmail" class="col-sm-4 col-form-label">Hunt: Showdown Installation Folder</label>
                    <div class="col-sm-8">
                        <div @onclick="SelectFolder" class="btn btn-primary d-block">Select installation folder...</div>
                        @if (FileNotFound)
                        {
                            <small class="form-text">File could not be found, are you sure you selected the right folder?</small>
                        }
                        else
                        {
                            @if (HuntSettings.Path == null || HuntSettings.Path == string.Empty)
                            {
                                <small class="form-text">No folder selected yet...</small>
                            }
                            else
                            {
                                <small class="form-text">Current: @HuntSettings.Path</small>
                            }
                        }
                    </div>
                </div>
                <div class="form-group row mt-3">
                    <label for="staticEmail" class="col-sm-4 col-form-label">Start background worker when opening application</label>
                    <div class="col-sm-8">
                        @if (HuntSettings.Path == null || HuntSettings.Path == string.Empty || FileNotFound)
                        {
                            <div disabled class="btn btn-primary">
                                Select a path first (:
                            </div>
                        }
                        else
                        {
                            <div @onclick="ToggleStartBackgroundWorkerOnBoot" class="btn btn-primary">
                                @(HuntSettings.StartWorkerOnBoot ? "On" : "Off")
                            </div>
                        }
                    </div>
                </div>
                <div class="form-group row mt-3">
                    <label for="staticEmail" class="col-sm-4 col-form-label">Reset selected player</label>
                    <div class="col-sm-8">
                        @if (HuntSettings.PlayerProfileId == null || HuntSettings.PlayerProfileId == string.Empty)
                        {
                            <button disabled class="btn btn-primary">
                                Reset
                            </button>
                        }
                        else
                        {
                            <div @onclick="ResetProfileId" class="btn btn-primary">
                                Reset
                            </div>
                        }
                        <small class="form-text d-block">This is the player you selected as yourself on the matchscreen.</small>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="staticEmail" class="col-sm-4 col-form-label">Nvidia Highlights Temp Folder</label>
                    <div class="col-sm-8">
                        <div @onclick="SelectTempFolder" class="btn btn-primary d-block">Select Nvidia Highlights temp folder...</div>
                        @if (FileNotFound)
                        {
                            <small class="form-text">File could not be found, are you sure you selected the right folder?</small>
                        }
                        else
                        {
                            @if (HuntSettings.HighlightsTempPath == null || HuntSettings.HighlightsTempPath == string.Empty)
                            {
                                <small class="form-text">Check settings of Nvidia overlay -> Highlights -> Temporary path</small>
                            }
                            else
                            {
                                <small class="form-text">Current: @HuntSettings.HighlightsTempPath</small>
                            }
                        }
                    </div>
                </div>
                <div class="form-group row">
                    <label for="staticEmail" class="col-sm-4 col-form-label">Hunt: Showdown Highlights Output Folder</label>
                    <div class="col-sm-8">
                        <div @onclick="SelectOutputFolder" class="btn btn-primary d-block">Select Highlights Output folder...</div>
                        @if (FileNotFound)
                        {
                            <small class="form-text">File could not be found, are you sure you selected the right folder?</small>
                        }
                        else
                        {
                            @if (HuntSettings.HighlightsOutputPath == null || HuntSettings.HighlightsOutputPath == string.Empty)
                            {
                                <small class="form-text">No folder selected yet...</small>
                            }
                            else
                            {
                                <small class="form-text">Current: @HuntSettings.HighlightsOutputPath</small>
                            }
                        }
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@code {

    public bool FileNotFound { get; set; } = false;
    
    public Models.Settings HuntSettings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        HuntSettings = await _mediator.Send(new GetSettingsCommand());
    }

    public async Task SelectFolder()
    {
        var result = await _folderPicker.PickFolder();
        if (result != null)
        {
            HuntSettings.Path = result;
            var updateResult = await _mediator.Send(new UpdateSettingsCommand(HuntSettings));
            if (updateResult == GeneralStatus.Error)
            {
                FileNotFound = true;
            }
            else
            {
                FileNotFound = false;
            }
        }
    }

    public async Task SelectTempFolder()
    {
        var result = await _folderPicker.PickFolder();
        if (result != null)
        {
            HuntSettings.HighlightsTempPath = result;
            var updateResult = await _mediator.Send(new UpdateSettingsCommand(HuntSettings));
            if (updateResult == GeneralStatus.Error)
            {
                FileNotFound = true;
            }
            else
            {
                FileNotFound = false;
            }
        }
    }

    public async Task SelectOutputFolder()
    {
        var result = await _folderPicker.PickFolder();
        if (result != null)
        {
            HuntSettings.HighlightsOutputPath = result;
            var updateResult = await _mediator.Send(new UpdateSettingsCommand(HuntSettings));
            if (updateResult == GeneralStatus.Error)
            {
                FileNotFound = true;
            }
            else
            {
                FileNotFound = false;
            }
        }
    }

    private async Task ToggleStartBackgroundWorkerOnBoot()
    {
        HuntSettings.StartWorkerOnBoot = !HuntSettings.StartWorkerOnBoot;
        await _mediator.Send(new UpdateSettingsCommand(HuntSettings));
    }

    private async Task ResetProfileId()
    {
        HuntSettings.PlayerProfileId = "";
        await _mediator.Send(new UpdateSettingsCommand(HuntSettings));
    }
}
