@using HuntStats.State
@using System.ComponentModel
@using System.Diagnostics
@using Dapper
@using Dommel
@using HuntStats.Data
@using HuntStats.Features
@using HuntStats.Models
@using MediatR
@inherits LayoutComponentBase
@inject AppState _appState;
@inject IDbConnectionFactory _connectionFactory;
@inject IMediator _mediator
@using Serilog;

<div class="layout" @onmousedown="_appState.ClickedOutside">
    <div class="sidebar @SidebarClass()">
        <div class="sidebar-wrapper">
            <NavMenu/>
        </div>
    </div>
    @* <div class="sidebar-faker"></div> *@
    <div @onclick="ToggleSidebar" class="sidebar-backdrop">
    </div>
    <div @onclick="ToggleSidebar" class="sidebar-toggle" id="sidebarToggle">
        <i id="sidebarToggleIcon" class="far fa-chevron-left"></i>
        <i id="sidebarToggleIcon" class="far fa-chevron-right"></i>
    </div>
    <div class="main">
        <div class="header">
            <a id="sidebarToggle" @onclick="ToggleSidebar" class="nav-link mobile-sidebar-toggle">
                <i class="far fa-bars"></i>
            </a>
            <div class="right-header">
                @if (Path == null || Path == string.Empty)
                {
                    <button disabled class="btn btn-primary disabled">
                        Please check ur settings...
                    </button>
                }
                else
                {
                    @if (worker.CancellationPending)
                    {
                        <button disabled class="btn btn-primary disabled">
                            Stopping background worker...
                        </button>
                    }
                    else
                    {
                        @if (!worker.IsBusy)
                        {
                            <button @onclick="ToggleCheck" class="btn btn-primary">
                                Start background worker
                            </button>
                        }
                        else
                        {
                            <button @onclick="ToggleCheck" class="btn btn-primary">
                                Stop background worker
                            </button>
                        }
                    }
                }
                @if (HighlightsTempPath == null || HighlightsTempPath == string.Empty)
                {
                    <button disabled class="btn btn-primary disabled">
                        Please check ur settings...
                    </button>
                }
                else
                {
                    @if (highlightWorker.CancellationPending)
                    {
                        <button disabled class="btn btn-primary disabled">
                            Stopping highlight background worker...
                        </button>
                    }
                    else
                    {
                        @if (!highlightWorker.IsBusy)
                        {
                            <button @onclick="ToggleHighlightCheck" class="btn btn-primary">
                                Start highlight background worker
                            </button>
                        }
                        else
                        {
                            <button @onclick="ToggleHighlightCheck" class="btn btn-primary">
                                Stop highlight background worker
                            </button>
                        }
                    }
                }
            </div>
        </div>
        <div class="container">
            <div class="content">
                @Body
            </div>
        </div>
    </div>
</div>


@code {
    private BackgroundWorker worker;
    private BackgroundWorker highlightWorker;
    public string Path { get; set; }
    public string HighlightsTempPath { get; set; }
    public string HighlightsOutputPath { get; set; }
    private bool _navState;
    private string _userMail;
    private Boolean _sidebarClosed = false;
    private Boolean _mobileSidebarOpen = false;

    public string SidebarClass()
    {
        if (_sidebarClosed) return "closed";
        return "";
    }

    public void ToggleSidebar()
    {
        _sidebarClosed = !_sidebarClosed;
        StateHasChanged();
    }

    public async Task ToggleCheck()
    {
        if (!worker.CancellationPending)
        {
            if (worker.IsBusy)
            {
                Debug.WriteLine("Stopping background worker...");
                worker.CancelAsync();
            }
            else
            {
                Debug.WriteLine("Starting background worker...");
                worker.RunWorkerAsync();
            }
        }
        // StateHasChanged();
    }

    public async Task ToggleHighlightCheck()
    {
        if (!highlightWorker.CancellationPending)
        {
            if (highlightWorker.IsBusy)
            {
                Debug.WriteLine("Stopping highlight background worker...");
                highlightWorker.CancelAsync();
            }
            else
            {
                Debug.WriteLine("Starting highlight background worker...");
                highlightWorker.RunWorkerAsync();
            }
        }
        // StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var appdataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\HuntStats";
        if(!Directory.Exists(appdataDirectory)) Directory
            .CreateDirectory(appdataDirectory);
        await _mediator.Send(new InitializeDatabaseCommand());
        _appState.CloseSidebarEvent += ToggleSidebar;
        _appState.PathChangedEvent += AppStateOnPathChangedEvent;
        _appState.HighlightsTempPathChangedEvent += AppStateOnHighlightsTempPathChangedEvent;
        _appState.HighlightsOutputPathChangedEvent += AppStateOnHighlightsOutputPathChangedEvent;
        var settings = (await _mediator.Send(new GetSettingsCommand()));
        Path = settings.Path;
        HighlightsTempPath = settings.HighlightsTempPath;
        HighlightsOutputPath = settings.HighlightsOutputPath;
        ConstructWorker();
        ConstructHighlightWorker();
        var con = await _connectionFactory.GetOpenConnectionAsync();
        if (settings.StartWorkerOnBoot)
        {
            worker.RunWorkerAsync();
            highlightWorker.RunWorkerAsync();
        }
    }

    private async void AppStateOnPathChangedEvent(string obj)
    {
        Path = obj;
        if (worker != null)
        {
            if (!File.Exists(Path + @"\user\profiles\default\attributes.xml"))
            {
                if (!worker.CancellationPending && worker.IsBusy) worker.CancelAsync();
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void AppStateOnHighlightsTempPathChangedEvent(string obj)
    {
        HighlightsTempPath = obj;
        if (highlightWorker != null)
        {
            if (!Directory.Exists(HighlightsTempPath))
            {
                if (!highlightWorker.CancellationPending && worker.IsBusy) highlightWorker.CancelAsync();
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void AppStateOnHighlightsOutputPathChangedEvent(string obj)
    {
        HighlightsOutputPath = obj;
        if (highlightWorker != null)
        {
            if (!Directory.Exists(HighlightsOutputPath))
            {
                if (!highlightWorker.CancellationPending && worker.IsBusy) highlightWorker.CancelAsync();
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private void ConstructWorker()
    {
        worker = new BackgroundWorker();
        worker.RunWorkerCompleted += WorkerOnRunWorkerCompleted;
        worker.DoWork += WorkerOnDoWork;
        worker.WorkerSupportsCancellation = true;
        InvokeAsync(StateHasChanged);
    }

    private void ConstructHighlightWorker()
    {
        highlightWorker = new BackgroundWorker();
        highlightWorker.RunWorkerCompleted += HighlightWorkerOnRunWorkerCompleted;
        highlightWorker.DoWork += HighlightWorkerOnDoWork;
        highlightWorker.WorkerSupportsCancellation = true;
        InvokeAsync(StateHasChanged);
    }

    private void WorkerOnRunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
    {
        if (e.Cancelled)
        {
            StateHasChanged();
        }
    }

    private void WorkerOnDoWork(object sender, DoWorkEventArgs e)
    {
        while (!worker.CancellationPending)
        {
            Thread.Sleep(10*1000);
            var result = Task.Run(() => { _mediator.Send(new XmlFileQuery()); });
        }
        Debug.WriteLine("Background worker should have stopped at this moment...");
        ConstructWorker();
    }

    private void HighlightWorkerOnRunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
    {
        if (e.Cancelled)
        {
            StateHasChanged();
        }
    }

    private void HighlightWorkerOnDoWork(object sender, DoWorkEventArgs e)
    {
        // I think this has some wierd concurrency problem because it keeps spawning new Threads.
        while (!highlightWorker.CancellationPending)
        {
            Thread.Sleep(10 * 1000);
            var result = Task.Run(() => { _mediator.Send(new HighlightsQuery()); });
        }
        Debug.WriteLine("Highlight background worker should have stopped at this moment...");
        ConstructHighlightWorker();
    }
}